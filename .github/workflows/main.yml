name: CI

on: [push]

jobs:
  docker:
    runs-on: ubuntu-latest

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # TODO test on ARM + AMD64
      - name: Test
        id: test
        run: |
          docker compose up -d --build
          docker ps 
          docker exec mitm-proxy /bin/bash -c "HTTP_PROXY=\"http://localhost:8080/\" curl --connect-timeout 30 --retry-delay 5 --retry-connrefused --retry-max-time 120 http://example-one.com"

      - name: CleanUp Test
        id: clean-test
        run: docker compose down || true

      - name: Prepare Releasing
        id: prep
        run: |
          #determine dockehub image using dockerhub username and github repo suffix
          DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/mitm-nginx-proxy-companion
          # default to version
          VERSION=next
          SHORTREF=${GITHUB_SHA::8}

          #use branch as version
          if [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=${GITHUB_REF#refs/heads/}
            [ $VERSION == "main" ] && VERSION=latest
            [ $VERSION == "develop" ] && VERSION=next
          fi

          #use tag as version
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          fi

          #use version as image tag
          TAGS="${DOCKER_IMAGE}:${VERSION}"

          # If version is a number also tag it 'latest'.
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi

          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}

      - name: Login to DockerHub
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v')
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build
        uses: docker/build-push-action@v2
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v')
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
